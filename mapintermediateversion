<!DOCTYPE html>
<html>
<body style="margin: 0" onresize="resizeMap()">
<style>
    #wrapper { position: relative; }
    #map { z-index: 1 }
    #statsscreen { position: absolute; top: 5px; right: 5px; width: 50%; height: 25%; z-index: 99; background-color: #eeeeee; border-size: 3px; border-style: solid; border-color: #444444}
    #scoretextdiv { position: absolute; top: 5%; left: 5%; width: 50%; height: 30%; }
    #timertextdiv { position: absolute; bottom: 35%; left: 5%; width: 50%; height: 30%; }
    #multipliertextdiv { position: absolute; bottom: 5%; left: 5%; width: 50%; height: 30%; }
    #scorevalue { position: absolute; top: 5%; right: 5%; width: 40%; height: 30%; }
    #timervalue { position: absolute; bottom: 35%; right: 5%; width: 40%; height: 30%; }
    #multipliervalue { position: absolute; bottom: 5%; right: 5%; width: 40%; height: 30%; }
    h1 { font-size: 20px; } 
</style>
<div id="wrapper">
	<div id="map"></div>
	<div id="statsscreen">
		<div id="scoretextdiv"><h1 id="scoretext">Score:</h1></div>
		<div id="timertextdiv"><h1 id="timetext">Time:</h1></div>
		<div id="multipliertextdiv"><h1 id="multipliertext">Combo:</h1></div>
		<div id="scorevalue"><h1 id="score"></h1></div>
		<div id="timervalue"><h1 id="time"></h1></div>
		<div id="multipliervalue"><h1 id="multiplier"></h1></div>
    </div>
</div>
<script>
// furthest distance to fetch markers from, in meters
markerRadius = 6000;
score = 0;
egg = null;

function deg2rad(deg) {
	return deg * (Math.PI / 180);
}

function withinDistance(lat1, lon1, lat2, lon2, radius) {
    return radius > getDistanceFromLatLonInM(lat1, lon1, lat2, lon2);
}

function withinDistance(loc1, loc2, radius){
    return radius > getDistanceFromLatLonInM(loc1.lat(), loc1.lng(), loc2.lat(), loc2.lng());
}

function getDistanceFromLatLonInM(lat1, lon1, lat2, lon2) {
	var dLat = deg2rad(lat2-lat1);
	var dLon = deg2rad(lon2-lon1);
	var a = 
		Math.sin(dLat/2) * Math.sin(dLat/2) +
		Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
		Math.sin(dLon/2) * Math.sin(dLon/2); 
	return (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))) * 6371000;
}

function updateCurrentLocation(lat, lon){
    latitude = lat;
    longitude = lon;
    var newLatLng = new google.maps.LatLng(latitude, longitude);
    meLocation.setPosition(newLatLng);
}

function resizeMap() {
	document.getElementById("map").style.height = window.innerHeight.toString().concat("px");
	document.getElementById("map").style.width = window.innerWidth.toString().concat("px");
}

function updateScore(newScore)
{
    score = newScore;
    document.getElementById("score").innerHTML = newScore.toString();
}

function updateMultiplier(newMultiplier)
{
    document.getElementById("multiplier").innerHTML = newMultiplier.toString();
}

secondsRemaining = 0;
function startTimer(seconds)
{
    secondsRemaining = seconds - 1;
    timer = setInterval(updateTimer, 1000);
    updateDisplayedTime();
}

function updateDisplayedTime()
{
    var secondText = (secondsRemaining % 60).toString();
    if (secondsRemaining % 60 < 10)
    {
        secondText = "0" + secondText;
    }
    document.getElementById("time").innerHTML = Math.floor(secondsRemaining / 60).toString() + ": " + secondText;
}

function timeout()
{
    clearInterval(timer);
    updateScore(0);
	updateMultiplier(1);
	pathMarkerSpatialIds = []
	updatePath();
	
	// no need to display the timer
	document.getElementById("timetext").innerHTML = "";
	document.getElementById("time").innerHTML = "";
	
	// let Spatial know that the player timed out
    window.location.href = "uniwebview://resetscore";
}

function updateTimer()
{
    if (secondsRemaining == 0)
    {
        timeout();
        return;
    }
    secondsRemaining = secondsRemaining - 1;
    updateDisplayedTime();
}

function onMarkerClick(markerId, markerPosition) {
	if (withinDistance(meLocation.getPosition(), markerPosition, maxCheckInDistance)) {
		window.location.href = "uniwebview://destroy?id=" + markerId;
	} else {
		// TODO show error screen
	}
}

function onCheckInClick(markerId, markerPosition) {
	if (withinDistance(meLocation.getPosition(), markerPosition, maxCheckInDistance)) {
		window.location.href = "uniwebview://checkin?id=" + markerId;
	} else {
		// TODO show error screen
	}
}

function onGenericCheckInClick(markerType, markerPosition, markerName) {
	if (withinDistance(meLocation.getPosition(), markerPosition, maxCheckInDistance)) {
		window.location.href = "uniwebview://generic?type=" + markerType + "&lat=" + markerPosition.lat() + "&lon=" + markerPosition.lng() + "&name=" + markerName;
	} else {
		// TODO show error screen
	}
}

function BackControl(controlDiv) {

	// Set CSS for the control border.
	var controlUI = document.createElement('div');
	controlUI.style.backgroundColor = '#fff';
	controlUI.style.border = '2px solid #fff';
	controlUI.style.borderRadius = '3px';
	controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
	controlUI.style.cursor = 'pointer';
	controlUI.style.marginBottom = '22px';
	controlUI.style.textAlign = 'center';
	controlUI.title = 'Click to go back to the menu';
	controlDiv.appendChild(controlUI);

	// Set CSS for the control interior.
	var controlText = document.createElement('div');
	controlText.style.color = 'rgb(25,25,25)';
	controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
	controlText.style.fontSize = '14px';
	controlText.style.lineHeight = '38px';
	controlText.style.paddingLeft = '5px';
	controlText.style.paddingRight = '5px';
	controlText.innerHTML = 'Back to Menu';
	controlUI.appendChild(controlText);

	// Setup the click event listeners: simply set the map to Chicago.
	controlUI.addEventListener('click', function() {
		window.location.href = "uniwebview://back";
	});
}

function updatePath() {
	var newPath = [];
	googleMarkers.forEach(function(marker) {
		for (var i = 0; i < pathMarkerSpatialIds.length; i++) {
			if (pathMarkerSpatialIds[i] == marker.spatialId) {
				if (egg == null) {
					newPath.push(marker.getPosition());
					marker.setMap(null);
				} else {
					newPath.push(marker.position);
				}
				marker.intactOverlay.setMap(null);
				marker.destroyedOverlay.setMap(map);
				return;
			}
		}
		// we know marker is not in path
		if (egg == null) {
			marker.setMap(map);
		}
		marker.intactOverlay.setMap(map);
		marker.destroyedOverlay.setMap(null);
	});
	destroyPath.setPath(newPath);
}

function addPointToPath(updatedPathMarkerIds) {
    pathMarkerSpatialIds = updatedPathMarkerIds;
	updatePath();
}

function initializeMap() {
	map = new google.maps.Map(document.getElementById('map'), {
		center: {lat: latitude, lng: longitude},
		zoom: 16
	});
	mapCenter = map.getCenter();
	google.maps.event.addDomListener(map, 'idle', function() {
		mapCenter = map.getCenter();
	});
	google.maps.event.addDomListener(window, 'resize', function() {
		map.setCenter(mapCenter);
	});
	
	var backButtonDiv = document.createElement('div');
    var backControl = new BackControl(backButtonDiv);

    backButtonDiv.index = 1;
    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(backButtonDiv);
    meLocation = new google.maps.Marker({
                                              position: {lat: latitude, lng: longitude},
                                              map: map,
                                              icon: {
                                              anchor: {
                                              x: 15,
                                              y: 15
                                              },
                                              scaledSize: {
                                              width: 30,
                                              height: 30
                                              },
                                              //url: "http://www.etc.cmu.edu/wp-content/uploads/2013/08/Xiao-Bao-1.png"
                                                url: "http://matthewestone.com/PhotoTest/58deb4c133627.png"
                                              }
    });

	destroyPath = new google.maps.Polyline({
                                              path: [],
                                              geodesic: true,
                                              strokeColor: '#EE1100',
                                              strokeOpacity: 1.0,
                                              strokeWeight: 2
                                              });
                                              
    destroyPath.setMap(map);
	googleMarkers = [];
	if (egg == null) {
		spatialMarkers.forEach(function(spatialMarker) {
			switch (spatialMarker.metadata.type) {
				case "building":
					var googleMarker = new google.maps.Marker({
						position: {lat: spatialMarker.loc.coordinates[1], lng: spatialMarker.loc.coordinates[0]},
						label: {
							color: "yellow",
							fontSize: "35px",
							fontWeight: "bold",
							text: spatialMarker.name
						},
						title: spatialMarker.name
					});
					googleMarker.spatialId = spatialMarker._id;
					googleMarker.addListener('click', function() { onMarkerClick(googleMarker.spatialId, googleMarker.getPosition()); });
					googleMarker.intactOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.intactImagePath, spatialMarker.metadata.imageBounds);
					googleMarker.destroyedOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.destroyedImagePath, spatialMarker.metadata.imageBounds);
					googleMarkers.push(googleMarker);
					break;
				case "overlay":
					var mapOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.intactImagePath, spatialMarker.metadata.imageBounds);
					mapOverlay.setMap(map);
					break;
				default:
					break;
			}
		});
	} else {
		spatialMarkers.forEach(function(spatialMarker) {
			switch (spatialMarker.metadata.type) {
				case "building":
					var genericMarker;
					genericMarker.position = new google.maps.LatLng(spatialMarker.loc.coordinates[1], spatialMarker.loc.coordinates[0]);
					genericMarker.spatialId = spatialMarker._id;
					genericMarker.intactOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.intactImagePath, spatialMarker.metadata.imageBounds);
					genericMarker.destroyedOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.destroyedImagePath, spatialMarker.metadata.imageBounds);
					googleMarkers.push(genericMarker);
					break;
				case "overlay":
					var mapOverlay = new google.maps.GroundOverlay(spatialMarker.metadata.intactImagePath, spatialMarker.metadata.imageBounds);
					mapOverlay.setMap(map);
					break;			
				default:
					break;
			}
		});
		
		var placesUI = document.createElement('div');
		placesUI.style.position = "absolute";
		placesUI.style.height = "15%";
		placesUI.style.width = "auto";
		placesUI.style.overflowX = "scroll";
		placesUI.style.overflowY = "hidden";
		placesUI.style.whiteSpace = "nowrap";
		placesUI.style.zIndex = 99;
		placesUI.style.border = '2px solid #fff';
		placesUI.style.borderRadius = '3px';
		placesUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
		document.getElementById("wrapper").appendChild(placesUI);
		
		var promptIndex = 0;
		
		egg._markersToTake.forEach(function(markerToTake) {
			if (!markerToTake.visited)
			{
				var googleMarker = new google.maps.Marker({
					position: {lat: markerToTake.loc.coordinates[1], lng: markerToTake.loc.coordinates[0]},
					map: map,
					label: {
						color: "yellow",
						fontSize: "35px",
						fontWeight: "bold",
						text: markerToTake.name
					},
					title: markerToTake.name
				});
				googleMarker.spatialId = markerToTake._id;
				googleMarker.addListener('click', function() { onCheckInClick(googleMarker.spatialId, googleMarker.getPosition()); } );
				// Do not add to googleMarkers since this marker should not be processed in updatePath()
				
				var container = document.createElement('div');
				container.style.height = "40%";
				container.style.width = (window.innerWidth * 0.7).toString() + "px";
				container.style.position = "absolute";
				container.style.top = (5 + (promptIndex % 2)).toString + '%';
				container.style.paddingRight = "2%";
				container.style.paddingLeft = "2%";
				container.style.left = (window.innerWidth * 0.7 * (promptIndex / 2)).toString() + "px";
				container.style.display = "inline";
				placesUI.appendChild(container);
				
				var locPrompt = document.createElement('div');
				locPrompt.style.text-align = "left";
				locPrompt.style.overflow = "hidden";
				locPrompt.style.whiteSpace = "nowrap";
				locPrompt.innerHTML = markerToTake.name;
				container.appendChild(locPrompt);
				
				promptIndex++;
			}
		});
		geocoder = new google.maps.Geocoder;
		geocoderResultMarkers = [];
		
		egg._genericLocationsToTake.forEach(function(locToTake) {
			if (locToTake.requiredVisitCount < locToTake.placesVisited.length)
			{
				var container = document.createElement('div');
				container.style.height = "40%";
				container.style.width = (window.innerWidth * 0.7).toString() + "px";
				container.style.position = "absolute";
				container.style.top = (5 + (promptIndex % 2)).toString + '%';
				container.style.paddingRight = "2%";
				container.style.paddingLeft = "2%";
				container.style.left = (window.innerWidth * 0.7 * (promptIndex / 2)).toString() + "px";
				container.style.display = "inline";
				placesUI.appendChild(container);
				
				var searchButton = document.createElement("button");
				searchButton.style.position = "absolute";
				searchButton.style.right = "0%";
				searchButton.style.width = "25%";
				searchButton.innerHTML = "Search";
				searchButton.addEventListener("click", function() {
					displayGenericLocations(locToTake.type);
				});
				container.appendChild(searchButton);
				
				var locPrompt = document.createElement('div');
				locPrompt.style.text-align = "left";
				locPrompt.style.overflow = "hidden";
				locPrompt.style.whiteSpace = "nowrap";
				locPrompt.innerHTML = locToTake.descriptor + ' (' + locToTake.placesVisited.length.toString() +
					'/' + locToTake.requiredVisitCount.toString() + ')';
				container.appendChild(locPrompt);
				
				promptIndex++;
			}
		});
		// TODO build the entire placesUI with all the possible places
	}
	updatePath();
}

function displayGenericLocations(type) {
	var service = new google.maps.places.PlacesService(map);
	service.nearbySearch({location: meLocation.getPosition()}, function (results, status) {
		if (status === google.maps.places.PlacesServiceStatus.OK) {
			geocoderResultMarkers.forEach(function(oldMarker) {
				oldMarker.setMap(null);
			});
			geocoderResultMarkers = [];
			for (var i = 0; i < results.length; i++) {
				var newMarker = new google.maps.Marker({
					map: map,
					position: results[i].geometry.location,
					label: {
						color: "yellow",
						fontSize: "35px",
						fontWeight: "bold",
						text: results[i].name
					},
					title: results[i].name
				});

				newMarker.addListener('click', function() {
					onGenericCheckInClick(type, results[i].geometry.location, results[i].name);
				});
				geocoderResultMarkers.push(newMarker);
			}
        }
	});
}

// lat = latitude the player is currently at
// lon = longitude the player is currently at
// baseURL = the Spatial server base URL
// projectID = the Spatial project ID
function loadMap(lat, lon, baseURL, projectID, startScore, timerSeconds, multiplier, pathMarkerIds) {
	// initialize location variables globally
	latitude = lat;
	longitude = lon;
	
	pathMarkerSpatialIds = pathMarkerIds;
	
	// get markers and store them into a global variable
	var getReq = new XMLHttpRequest();
	getReq.onreadystatechange = function() {
		if (getReq.readyState == 4) {
			if (getReq.status == 200) {
				spatialMarkers = JSON.parse(getReq.responseText).markers;
			} else {
				console.log(getReq.status.toString() + " error, no markers received from Spatial");
				spatialMarkers = [];
			}
			// run the googlemaps script. it will run initializeMap in turn
			var googleMapsScript = document.createElement('script');
			googleMapsScript.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCejidwxDYN4APVvtlE7ZPsBtVdhB7JG70&callback=initializeMap";
			document.getElementsByTagName("body")[0].appendChild(googleMapsScript);
		}
	};
	getReq.open('GET', baseURL + "/v1/markers-by-distance?longitude=" +
		longitude.toString() + "&latitude=" + latitude.toString() + "&projectId=" +
		projectID + "&meters=" + markerRadius.toString(), true);
	getReq.send();
    
    updateScore(startScore);
    updateMultiplier(multiplier);
    if (score == 0)
    {
        // no need to display the timer
        document.getElementById("timetext").innerHTML = "";
    }
    else
    {
        startTimer(timerSeconds);
    }
    
}

function loadCheckInMap(lat, lon, baseURL, projectID, startScore, timerSeconds, multiplier, pathMarkerIds, checkInDistanceMax, eggObj) {
	egg = eggObj;
	maxCheckInDistance = checkInDistanceMax;
	loadMap(lat, lon, baseURL, projectID, startScore, timerSeconds, multiplier, pathMarkerIds);
}

resizeMap();
//loadCheckInMap(40.43, -79.96, "https://spatial-api-poc.herokuapp.com", "58b070d3b4c96e00118b66ee", 0, 0, 1, [], 40, {_markersToTake: [], _genericLocationsToTake: []});
//loadMap(40.43, -79.96, "https://spatial-api-poc.herokuapp.com", "58b070d3b4c96e00118b66ee", 0, 0, 1, []);
</script>
</body>
</html>
